# This config file defines Shinken specific objects like
# satellites or Realms
#
# This file can be used for defining a simple environement:
# * one scheduler that schedules the checks (but doesn't launch them)
# * one poller (that launches the checks)
# * one reactionner (that sends the notifiations)
# * one broker (that gives jobs to modules. Modules export data like logs,
#   status.dat, mysql export, etc etc)
# * some of the brokers modules (that do the jobs)
# * one arbiter (that reads the configuration and dispatches it to all
#   others)
#
# So there is no high availability here, just a simple "Nagios
# equivalent" (but with more perf and less code! )

# The scheduler is a "Host manager". It gets the hosts and theirs
# services and it schedules the checks for the pollers.
define scheduler {
       scheduler_name     <%= @hostname %>   ; just the name
       address            <%= @host %>       ; ip or dns address of the daemon
       port               <%= scope.lookupvar('shinken::roles::scheduler::port') %>

       #optional
       spare              <%= scope.lookupvar('shinken::roles::scheduler::spare') %>
       weight             <%= scope.lookupvar('shinken::roles::scheduler::weight') %>
       timeout            <%= scope.lookupvar('shinken::roles::scheduler::timeout') %>
       data_timeout       <%= scope.lookupvar('shinken::roles::scheduler::data_timeout') %>
       max_check_attempts <%= scope.lookupvar('shinken::roles::scheduler::max_check_attempts') %>
       check_interval     <%= scope.lookupvar('shinken::roles::scheduler::check_interval') %>
       modules            PickleRetention

# Interesting modules:
#   PickleRetention    : Save data before exiting in flat file
#   MemcacheRetention  : Same but in a memcache server
#   RedisRetention     : same, but in a Redis server :)
#   NagiosRetention    : only READ retention info from a nagios retention file

       #advanced feature
       realm	          All ; optional (realm are multisites features)
}

# Pollers launch checks
define poller {
       poller_name         <%= @hostname %>
       address             <%= @host %>
       port                <%= scope.lookupvar('shinken::roles::poller::port') %>

       # optional
       manage_sub_realms   <%= scope.lookupvar('shinken::roles::poller::manage_sub_realms') %>
       min_workers         <%= scope.lookupvar('shinken::roles::poller::min_workers') %>
       max_workers         <%= scope.lookupvar('shinken::roles::poller::max_workers') %>
       processes_by_worker <%= scope.lookupvar('shinken::roles::poller::processes_by_worker') %>
       polling_interval	   <%= scope.lookupvar('shinken::roles::poller::polling_interval') %>
       timeout	           <%= scope.lookupvar('shinken::roles::poller::timeout') %>
       data_timeout        <%= scope.lookupvar('shinken::roles::poller::data_timeout') %>
       check_interval      <%= scope.lookupvar('shinken::roles::poller::check_interval') %>
       max_check_attempts  <%= scope.lookupvar('shinken::roles::poller::max_check_attempts') %>


       # advanced features
       modules             NrpeBooster
       #poller_tags	None
       realm               All
}

# Poller can have a nrpe module: commands tagged with
# nrpe_poller as module_type will be managed by this module.
# it will bypass the launch of check_nrpe, and will do the
# connection itself.
define module {
       module_name	NrpeBooster
       module_type	nrpe_poller
}

# Reactionner launch notifications
define reactionner {
       reactionner_name   <%= @hostname %>
       address            <%= @host %>
       port               <%= scope.lookupvar('shinken::roles::reactionner::port') %>
       spare              <%= scope.lookupvar('shinken::roles::reactionner::spare') %>

       # optional
       manage_sub_realms   <%= scope.lookupvar('shinken::roles::reactionner::manage_sub_realms') %>
       min_workers         <%= scope.lookupvar('shinken::roles::reactionner::min_workers') %>
       max_workers         <%= scope.lookupvar('shinken::roles::reactionner::max_workers') %>
       polling_interval    <%= scope.lookupvar('shinken::roles::reactionner::polling_interval') %>
       timeout             <%= scope.lookupvar('shinken::roles::reactionner::timeout') %>
       data_timeout        <%= scope.lookupvar('shinken::roles::reactionner::data_timeout') %>
       check_interval      <%= scope.lookupvar('shinken::roles::reactionner::check_interval') %>
       max_check_attempts  <%= scope.lookupvar('shinken::roles::reactionner::max_check_attempts') %>

       # advanced
       realm              All
}

# The broker manages data export (in flat file or in database)
# with it's modules
# Here just log files and status.dat file modules
define broker {
       broker_name        <%= @hostname %>
       address            <%= @host %>
       port               <%= scope.lookupvar('shinken::roles::broker::port') %>
       spare              0

       # Which modules to load? LiveSatus and logs by default.
       modules            Livestatus, Simple-log, WebUI, ToNdodb_Mysql, PickleRetentionBroker

       # optional
       manage_sub_realms  <%= scope.lookupvar('shinken::roles::broker::manage_sub_realms') %>
       manage_arbiters    <%= scope.lookupvar('shinken::roles::broker::manage_arbiters') %>
       check_interval     <%= scope.lookupvar('shinken::roles::broker::check_interval') %>
       timeout            <%= scope.lookupvar('shinken::roles::broker::timeout') %>
       data_timeout       <%= scope.lookupvar('shinken::roles::broker::data_timeout') %>
       max_check_attempts <%= scope.lookupvar('shinken::roles::broker::max_check_attempts') %>

       # advanced
       realm              All
}

# Module: Livestatus
# LoadingDaemon: Broker 
# The LIVESTATUS API makes internal Shinken data available via the network using an
# SQL-like syntax. The API supports various access methods, authentication and sophisticated
# performance options. The permier interface to Shinken internal host and service states,
# historical data, performance data, configuration data, comments, maintenance periods, etc.
define module {
    module_name      Livestatus
    module_type      livestatus
    host             <%= @host %>       ; * = listen on all configured ip addresses
    port             50000   ; port to listen
    # uncomment the socket line if you want to open
    # an unix socket for the connection
    #socket           /usr/local/shinken/var/rw/live
    modules          ToNdodb_Mysql

    # Prefer SQL queries if available instead of internal in-memory lookups
    # Some corner cases may return invalid or no data. Defaults to 0 if unset.
    # Only supported for sqlite databases at this time.
    #use_aggressive_sql   1   ; Set to 1 for large installations

    # Available modules:
    # - logsqlite: send historical logs to a local sqlite database
    # - mongologs: send historical logs to a mongodb database

    # Only set debug if you're having problems with this module
    #debug               /tmp/ls.debug
    # Set to 1 if you want to dump queries/responses too
    # WARNING: it is very verbose
    #debug_queries       0
}

# Now the modules for the broker. The first 2 that are used, and all
# the others :)

# The log managment for ALL daemons (all in one log, cool isn't it? ).
define module {
       module_name      Simple-log
       module_type      simple_log
       path		/var/log/shinken/nagios.log
       archive_path	/var/log/shinken/archives/
}


# Status.dat and objects.cache export. For the old Nagios interface
define module {
       module_name              Status-Dat
       module_type              status_dat
       status_file              /var/log/shinken/status.dat
       object_cache_file        /var/log/shinken/objects.cache
       status_update_interval   15
}

# The log managment for ALL daemons (all in one log, cool isn't it? ).
define module {
       module_name      WebUI
       module_type      webui

       host             <%= @web_ip %>
       port             7767

       auth_secret	    <%= @web_ui_auth_secret %>

       # Advanced options.
       # Do not touch if you don't know what you are doing

       #http_backend    wsgiref
       # ; can be also: cherrypy, paste, tornado, twisted
       # ; or gevent

       # Modules for the WebUI.
<% if @use_mysql then -%>
       modules          OpenLDAP_UI,Apache_passwd,Cfg_password,ToNdodb_Mysql
<% else -%>
       modules          OpenLDAP_UI,Apache_passwd,Cfg_password
<% end -%>
}

# The log managment for ALL daemons (all in one log, cool isn't it? ).
define module {
       module_name      OpenLDAP_UI
       module_type      ad_webui
       mode             openldap

<%
  t_ldapuri = Array(@ldapuri).first
  t_ldapuri.sub!(/ldap:/, 'ldaps:')
#  t_ldapuri =~ /^(ldaps?:\/\/)?(.*)(:.*)?$/

#  t_ldapuri = $1

  if t_ldapuri.nil? or t_ldapuri.empty? then
    raise Puppet::ParseError("Could not parse given LDAP URI: #{@ldapuri}")
  end
-%>
       ldap_uri     <%= t_ldapuri -%>:636
       username	    <%= @ldap_bind_dn %>
       password     <%= @ldap_bind_pw %>
       basedn       <%= @ldap_basedn %>
}

# The log managment for ALL daemons (all in one log, cool isn't it? ).
define module {
       module_name      Apache_passwd
       module_type      passwd_webui

       # WARNING: put the full PATH for this value!
       passwd           /etc/shinken/htpasswd.users
}

# The log managment for ALL daemons (all in one log, cool isn't it? ).
define module {
       module_name      Cfg_password
       module_type      cfg_password_webui
}

# All other modules that can be called if you have installed the
# databases, or if you want to test something else :)

# Here the NDO/MySQL module
# So you can use with NagVis or Centreon
define module {
       module_name             ToNdodb_Mysql
       module_type             ndodb_mysql
       database                shinken         ; database name
#       user                    <%= scope.lookupvar('shinken::db::mysq;::dbuser') %>
       user                    root
       password                <%= scope.lookupvar('shinken::db::mysql::mysql_root_password') %>
       host                    <%= scope.lookupvar('shinken::db::mysql::bind_address') %>
       character_set           <%= scope.lookupvar('shinken::db::mysql::charset') %>
       port                    3306
       prefix                  nagios_

       synchronize_database_id 0
}

############################# For the schedulers
# Now the good flat file for retention module
define module {
       module_name      NagiosRetention
       module_type      nagios_retention_file
       path             /var/log/shinken/retention-nagios.dat
}

# Now the memcache one
# Now the good flat file for retention module
define module {
       module_name      MemcacheRetention
       module_type      memcache_retention
       server           127.0.0.1
       port             11211
}

# The old namaed pipe way from Nagios
define module {
       module_name      CommandFile
       module_type      named_pipe
       command_file     /var/log/shinken/rw/nagios.cmd
}

# Hosts and Services configuration can be pulled from a MySQL database
# All hosts and services read from the database will be added to the
# others of the standard flat file.
# You can easily use an existing database, you just have to define the queries.
# It can be a useful module to use for HA too :)
# Warning: only for hosts and services
define module {
       module_name      MySQLImport
       module_type      mysql_import
       host		<%= @host %>
       login		root
       password		!change_me!
       database		supervision
       reqhosts 	SELECT host_name, alias, realm, address ,template AS 'use' FROM hosts
       reqservices	SELECT host_name, service_description, normal_check_interval, check_command ,template AS 'use' FROM services
       reqcontacts	SELECT contact_name, email, template AS 'use' FROM contacts
}

# The arbiter definition is optional
# WARNING: You must change host_name with the hostname of your machine !!!
define arbiter {
       arbiter_name	      <%= @hostname %>
       host_name          <%= @host %>   ;result of the hostname command under Unix
       address            <%= @host %>   ;IP or DNS adress
       port               <%= scope.lookupvar('shinken::roles::arbiter::port') %>
       spare              <%= scope.lookupvar('shinken::roles::arbiter::spare') %>
#      uncomment the line below if you want to use the GLPI module and the NSCA one
#      modules		CommandFile,GLPIImport, NSCA, VMWare_auto_linking, TSCA

#      Uncomment theses lines in a HA architecture so the master
#      and slaves know how much time to wait the other
       check_interval     <%= scope.lookupvar('shinken::roles::arbiter::check_interval') %> ; ping it every minute
       timeout            <%= scope.lookupvar('shinken::roles::arbiter::timeout') %> ; 'ping' timeout
       timeout            <%= scope.lookupvar('shinken::roles::arbiter::data_timeout') %>
       max_check_attempts <%= scope.lookupvar('shinken::roles::arbiter::max_check_attempts') %>


# List of interesting modules:
#  CommandFile              : open the named pipe nagios.cmd
#  PickleRetentionArbiter   : save data before exiting
#  NSCA                     : NSCA server
#  VMWare_auto_linking      : lookup at Vphere server for dependencies
#  GLPIImport               : import hosts from GLPI
#  TSCA                     : TSCA server
       realm              ALL
}

# Module: PickleRetention
# LoadingDaemon: Scheduler
# Retention file to keep state between process restarts.
define module {
    module_name      PickleRetention
    module_type      pickle_retention_file_generic
    path             /tmp/retention.dat
}


# Module: PickleRetentionBroker
# LoadingDaemon: Broker
# Retention file to keep state between process restarts. Not actually sure what it caches!?!
define module {
    module_name      PickleRetentionBroker
    module_type      pickle_retention_file_generic
    path             /tmp/retention_broker.dat
}

# Module: PickleRetentionArbiter
# LoadingDaemon: Arbiter
# Retention file to keep state between process restarts. Not actually sure what it caches!?!
define module {
    module_name      PickleRetentionArbiter
    module_type      pickle_retention_file_generic
    path             /tmp/retention_arbiter.dat
}

# The receiver manages passive information. It's just a "buffer" that
# will be readfrom the arbiter to dispatch data
define receiver {
       receiver_name      <%= @hostname %>
       address            <%= @host %>
       port               <%= scope.lookupvar('shinken::roles::receiver::port') %>
       spare              <%= scope.lookupvar('shinken::roles::receiver::spare') %>

       # The main goal of the receiver is to load
       # Passive modules, like the NSCA one
       #modules		 NSCA,CommandFile

       timeout            <%= scope.lookupvar('shinken::roles::receiver::timeout') %>
       data_timeout       <%= scope.lookupvar('shinken::roles::receiver::data_timeout') %>
       max_check_attempts <%= scope.lookupvar('shinken::roles::receiver::max_check_attempts') %>
       check_interval     <%= scope.lookupvar('shinken::roles::receiver::check_interval') %>

       # advanced
       realm              All
}

# Very advanced feature for multisite managment.
# Consider to look at the doc before touching it :)
define realm {
       realm_name  All
       default		1
}
